// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
     Mux16(a=x, b=false, sel=zx, out=xZeroed);
     Not16(in=xZeroed, out=xNot);
     Mux16(a=xZeroed, b=xNot, sel=nx, out=xProcessed);
     Mux16(a=y, b=false, sel=zy, out=yZeroed);
     Not16(in=yZeroed, out=yNot);
     Mux16(a=yZeroed, b=yNot, sel=ny, out=yProcessed);
     Add16(a=xProcessed, b=yProcessed, out=addResult);
     And16(a=xProcessed, b=yProcessed, out=andResult);
     Mux16(a=andResult, b=addResult, sel=f, out=fResult);
     Not16(in=fResult, out=outNot);
     Mux16(a=fResult, b=outNot, sel=no, out[0]=outValue0, out[1]=outValue1, out[2]=outValue2,
     out[3]=outValue3, out[4]=outValue4, out[5]=outValue5, out[6]=outValue6, out[7]=outValue7,
     out[8]=outValue8, out[9]=outValue9, out[10]=outValue10, out[11]=outValue11, out[12]=outValue12,
      out[13]=outValue13, out[14]=outValue14, out[15]=outValue15);
     Or8Way(in[0]=outValue0, in[1]=outValue1, in[2]=outValue2, in[3]=outValue3,
           in[4]=outValue4, in[5]=outValue5, in[6]=outValue6, in[7]=outValue7, out=orf);
     Or8Way(in[0]=outValue8, in[1]=outValue9, in[2]=outValue10, in[3]=outValue11,
            in[4]=outValue12, in[5]=outValue13, in[6]=outValue14, in[7]=outValue15, out=ors);
     Or(a=orf, b=ors, out=orfull);
     Not(in=orfull, out=zr);
     And(a=outValue15, b=true, out=ng);
     Or(a=outValue0, b=outValue0, out=out[0]);
     Or(a=outValue1, b=outValue1, out=out[1]);
     Or(a=outValue2, b=outValue2, out=out[2]);
     Or(a=outValue3, b=outValue3, out=out[3]);
     Or(a=outValue4, b=outValue4, out=out[4]);
     Or(a=outValue5, b=outValue5, out=out[5]);
     Or(a=outValue6, b=outValue6, out=out[6]);
     Or(a=outValue7, b=outValue7, out=out[7]);
     Or(a=outValue8, b=outValue8, out=out[8]);
     Or(a=outValue9, b=outValue9, out=out[9]);
     Or(a=outValue10, b=outValue10, out=out[10]);
     Or(a=outValue11, b=outValue11, out=out[11]);
     Or(a=outValue12, b=outValue12, out=out[12]);
     Or(a=outValue13, b=outValue13, out=out[13]);
     Or(a=outValue14, b=outValue14, out=out[14]);
     Or(a=outValue15, b=outValue15, out=out[15]);
}





